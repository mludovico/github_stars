// Mocks generated by Mockito 5.0.16 from annotations
// in github_stars/test/login/infra/login_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:github_stars/app/login/infra/datasources/login_local_datasource.dart'
    as _i4;
import 'package:github_stars/app/login/infra/datasources/login_remote_datasource.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [LoginRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRemoteDatasource extends _i1.Mock
    implements _i2.LoginRemoteDatasource {
  MockLoginRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> getAccessTokenData(String? code) =>
      (super.noSuchMethod(Invocation.method(#getAccessTokenData, [code]),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LoginLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginLocalDatasource extends _i1.Mock
    implements _i4.LoginLocalDatasource {
  MockLoginLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> cacheAccessTokenData(String? accessToken) => (super
      .noSuchMethod(Invocation.method(#cacheAccessTokenData, [accessToken]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<String?> getCachedAccessTokenData() =>
      (super.noSuchMethod(Invocation.method(#getCachedAccessTokenData, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  String toString() => super.toString();
}
